#!/usr/bin/env bash

# Simple Git pre-commit hook that only formats Go files (no linting)
# Use this if go vet is too annoying with cross-package dependencies

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if we have any Go files staged
if ! git diff --cached --name-only | grep -q '\.go$'; then
  exit 0
fi

echo "🔍 Formatting Go files..."

# Check for required tools
MISSING_TOOLS=()
if ! command -v goimports &> /dev/null; then
  MISSING_TOOLS+=("goimports")
fi
if ! command -v gofumpt &> /dev/null; then
  MISSING_TOOLS+=("gofumpt")
fi

# If tools are missing, try to install them
if [ ${#MISSING_TOOLS[@]} -gt 0 ]; then
  echo -e "${YELLOW}Missing tools: ${MISSING_TOOLS[*]}${NC}"
  echo "Installing missing Go formatters..."
  
  if [[ " ${MISSING_TOOLS[@]} " =~ " goimports " ]]; then
    go install golang.org/x/tools/cmd/goimports@latest 2>/dev/null || {
      echo -e "${RED}Failed to install goimports${NC}"
      exit 1
    }
  fi
  
  if [[ " ${MISSING_TOOLS[@]} " =~ " gofumpt " ]]; then
    go install mvdan.cc/gofumpt@latest 2>/dev/null || {
      echo -e "${RED}Failed to install gofumpt${NC}"
      exit 1
    }
  fi
fi

# Get all staged Go files
STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$' || true)

if [ -z "$STAGED_GO_FILES" ]; then
  exit 0
fi

# Function to check if file is generated
is_generated_file() {
  local file="$1"
  if head -n 10 "$file" 2>/dev/null | grep -q -E "(Code generated|DO NOT EDIT|Autogenerated|autogenerated|AUTOGENERATED|Generated by|@generated)"; then
    return 0
  fi
  if [[ "$file" =~ \.(pb|twirp)\.go$ ]] || [[ "$file" =~ \.gen\.go$ ]] || [[ "$file" =~ _gen\.go$ ]]; then
    return 0
  fi
  return 1
}

# Format each file
FORMATTED_FILES=()
FAILED_FILES=()
SKIPPED_FILES=()

for FILE in $STAGED_GO_FILES; do
  if [ -f "$FILE" ]; then
    # Skip generated files
    if is_generated_file "$FILE"; then
      SKIPPED_FILES+=("$FILE")
      echo -e "${YELLOW}⊘ Skipping generated: $(basename "$FILE")${NC}"
      continue
    fi
    
    # Run goimports first (organizes imports)
    if goimports -w "$FILE" 2>/dev/null; then
      # Then run gofumpt (stricter formatting)
      if gofumpt -w "$FILE" 2>/dev/null; then
        # Check if the file was modified
        if ! git diff --quiet "$FILE"; then
          FORMATTED_FILES+=("$FILE")
        fi
      else
        FAILED_FILES+=("$FILE")
        echo -e "${RED}✗ Failed to format: $FILE${NC}"
      fi
    else
      FAILED_FILES+=("$FILE")
      echo -e "${RED}✗ Failed to organize imports: $FILE${NC}"
    fi
  fi
done

# If files were formatted, add them back to staging
if [ ${#FORMATTED_FILES[@]} -gt 0 ]; then
  echo -e "${GREEN}✓ Formatted ${#FORMATTED_FILES[@]} Go file(s)${NC}"
  for FILE in "${FORMATTED_FILES[@]}"; do
    git add "$FILE"
  done
  echo -e "${YELLOW}Files have been formatted and re-staged.${NC}"
fi

# If any files failed to format, block the commit
if [ ${#FAILED_FILES[@]} -gt 0 ]; then
  echo -e "${RED}Some files could not be formatted. Please fix them manually.${NC}"
  exit 1
fi

# Summary
echo ""
if [ ${#SKIPPED_FILES[@]} -gt 0 ]; then
  echo -e "${YELLOW}Skipped ${#SKIPPED_FILES[@]} generated file(s)${NC}"
fi
echo -e "${GREEN}✓ All Go files properly formatted! (No linting performed)${NC}"
exit 0