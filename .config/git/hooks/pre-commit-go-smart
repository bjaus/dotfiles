#!/usr/bin/env bash

# Smart Git pre-commit hook for Go files
# This version handles multi-file packages better and uses advanced linters

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
USE_STATICCHECK=${USE_STATICCHECK:-false}  # Set to true to use staticcheck instead of go vet
USE_GOLANGCI=${USE_GOLANGCI:-true}         # Set to false to disable golangci-lint

# Check if we have any Go files staged
if ! git diff --cached --name-only | grep -q '\.go$'; then
  exit 0
fi

echo "üîç Checking Go files..."

# Check for required tools
MISSING_TOOLS=()
if ! command -v goimports &> /dev/null; then
  MISSING_TOOLS+=("goimports")
fi
if ! command -v gofumpt &> /dev/null; then
  MISSING_TOOLS+=("gofumpt")
fi

# If tools are missing, try to install them
if [ ${#MISSING_TOOLS[@]} -gt 0 ]; then
  echo -e "${YELLOW}Missing tools: ${MISSING_TOOLS[*]}${NC}"
  echo "Installing missing Go formatters..."
  
  if [[ " ${MISSING_TOOLS[@]} " =~ " goimports " ]]; then
    go install golang.org/x/tools/cmd/goimports@latest 2>/dev/null || {
      echo -e "${RED}Failed to install goimports${NC}"
      exit 1
    }
  fi
  
  if [[ " ${MISSING_TOOLS[@]} " =~ " gofumpt " ]]; then
    go install mvdan.cc/gofumpt@latest 2>/dev/null || {
      echo -e "${RED}Failed to install gofumpt${NC}"
      exit 1
    }
  fi
fi

# Get all staged Go files
STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$' || true)

if [ -z "$STAGED_GO_FILES" ]; then
  exit 0
fi

# Function to check if file is generated
is_generated_file() {
  local file="$1"
  # Check if file contains "Code generated" or "DO NOT EDIT" in first 10 lines
  if head -n 10 "$file" 2>/dev/null | grep -q -E "(Code generated|DO NOT EDIT|do not edit|Autogenerated|autogenerated|AUTOGENERATED|Generated by|generated by|@generated)"; then
    return 0
  fi
  # Also check for common generated file patterns
  if [[ "$file" =~ \.(pb|twirp)\.go$ ]] || [[ "$file" =~ \.gen\.go$ ]] || [[ "$file" =~ _gen\.go$ ]] || [[ "$file" =~ \.pb\.gw\.go$ ]]; then
    return 0
  fi
  return 1
}

# Format each file
echo -e "${BLUE}üìù Formatting files...${NC}"
FORMATTED_FILES=()
FAILED_FILES=()
SKIPPED_FILES=()

for FILE in $STAGED_GO_FILES; do
  if [ -f "$FILE" ]; then
    # Skip generated files
    if is_generated_file "$FILE"; then
      SKIPPED_FILES+=("$FILE")
      echo -e "  ${YELLOW}‚äò Skipping generated: $(basename $FILE)${NC}"
      continue
    fi
    
    # Run goimports first (organizes imports)
    if goimports -w "$FILE" 2>/dev/null; then
      # Then run gofumpt (stricter formatting)
      if gofumpt -w "$FILE" 2>/dev/null; then
        # Check if the file was modified
        if ! git diff --quiet "$FILE"; then
          FORMATTED_FILES+=("$FILE")
          echo -e "  ${GREEN}‚úì Formatted: $(basename $FILE)${NC}"
        fi
      else
        FAILED_FILES+=("$FILE")
        echo -e "  ${RED}‚úó Failed to format: $FILE${NC}"
      fi
    else
      FAILED_FILES+=("$FILE")
      echo -e "  ${RED}‚úó Failed to organize imports: $FILE${NC}"
    fi
  fi
done

# If files were formatted, add them back to staging
if [ ${#FORMATTED_FILES[@]} -gt 0 ]; then
  for FILE in "${FORMATTED_FILES[@]}"; do
    git add "$FILE"
  done
  echo -e "${GREEN}‚úì Formatted and re-staged ${#FORMATTED_FILES[@]} file(s)${NC}"
fi

# If any files failed to format, block the commit
if [ ${#FAILED_FILES[@]} -gt 0 ]; then
  echo -e "${RED}Some files could not be formatted. Please fix them manually.${NC}"
  exit 1
fi

# Linting phase
echo ""
echo -e "${BLUE}üîç Running linters...${NC}"

# Get unique package directories from staged files (excluding generated)
PACKAGE_DIRS=()
for FILE in $STAGED_GO_FILES; do
  if [ -f "$FILE" ] && ! is_generated_file "$FILE"; then
    DIR=$(dirname "$FILE")
    # Add to array if not already present
    if [[ ! " ${PACKAGE_DIRS[@]} " =~ " ${DIR} " ]]; then
      PACKAGE_DIRS+=("$DIR")
    fi
  fi
done

# Choose linting strategy
LINT_FAILED=false

if [ "$USE_STATICCHECK" = true ] && command -v staticcheck &> /dev/null; then
  # Use staticcheck (smarter about type resolution)
  echo -e "  Running staticcheck..."
  for DIR in "${PACKAGE_DIRS[@]}"; do
    if ! staticcheck "$DIR" 2>/dev/null; then
      echo -e "  ${RED}‚úó staticcheck failed in: $DIR${NC}"
      LINT_FAILED=true
    fi
  done
elif [ "$USE_GOLANGCI" = true ] && command -v golangci-lint &> /dev/null; then
  # Use golangci-lint (runs multiple linters including go vet)
  echo -e "  Running golangci-lint..."
  
  # Create a temporary config to run only fast, critical linters
  TEMP_CONFIG=$(mktemp)
  cat > "$TEMP_CONFIG" <<EOF
linters:
  enable:
    - govet
    - errcheck
    - ineffassign
    - typecheck
  disable-all: true

linters-settings:
  govet:
    check-shadowing: false

run:
  timeout: 30s
  skip-generated: true
EOF
  
  if ! golangci-lint run --config="$TEMP_CONFIG" --new-from-rev=HEAD~ 2>/dev/null; then
    echo -e "  ${YELLOW}‚ö† Some linting issues found (non-blocking)${NC}"
  fi
  rm -f "$TEMP_CONFIG"
else
  # Fallback to go vet (on whole packages for context)
  echo -e "  Running go vet on packages..."
  for DIR in "${PACKAGE_DIRS[@]}"; do
    # Run go vet on the package, not individual files
    if ! (cd "$DIR" && go vet . 2>&1 | grep -v "^#"); then
      # Check if it's just a type resolution issue
      VET_OUTPUT=$(cd "$DIR" && go vet . 2>&1 || true)
      if echo "$VET_OUTPUT" | grep -q "undefined:"; then
        echo -e "  ${YELLOW}‚ö† Type resolution issues in $DIR (might be OK if types are in other files)${NC}"
      else
        echo -e "  ${RED}‚úó go vet failed in: $DIR${NC}"
        echo "$VET_OUTPUT" | grep -v "^#"
        LINT_FAILED=true
      fi
    fi
  done
fi

# Final check - make sure code at least compiles
echo ""
echo -e "${BLUE}üî® Checking compilation...${NC}"
COMPILE_FAILED=false
for DIR in "${PACKAGE_DIRS[@]}"; do
  if ! (cd "$DIR" && go build -o /dev/null . 2>/dev/null); then
    echo -e "  ${RED}‚úó Build failed in: $DIR${NC}"
    COMPILE_FAILED=true
  else
    echo -e "  ${GREEN}‚úì Package builds: $DIR${NC}"
  fi
done

if [ "$COMPILE_FAILED" = true ]; then
  echo ""
  echo -e "${RED}‚ùå Code doesn't compile! Fix build errors before committing.${NC}"
  exit 1
fi

if [ "$LINT_FAILED" = true ]; then
  echo ""
  echo -e "${YELLOW}‚ö† Linting issues found. Consider fixing them.${NC}"
  echo -e "${YELLOW}To bypass: git commit --no-verify${NC}"
  # Don't block the commit for linting issues, only for compile errors
fi

# Summary
echo ""
if [ ${#SKIPPED_FILES[@]} -gt 0 ]; then
  echo -e "${YELLOW}üìä Skipped ${#SKIPPED_FILES[@]} generated file(s)${NC}"
fi
if [ ${#FORMATTED_FILES[@]} -gt 0 ]; then
  echo -e "${GREEN}üìä Formatted ${#FORMATTED_FILES[@]} file(s)${NC}"
fi
echo -e "${GREEN}‚úÖ Pre-commit checks passed!${NC}"
exit 0