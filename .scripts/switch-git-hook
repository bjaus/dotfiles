#!/usr/bin/env bash

# Script to switch between different Git hook versions

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

HOOKS_DIR="$HOME/.config/git/hooks"
DOTFILES_HOOKS_DIR="$HOME/Projects/dotfiles/.config/git/hooks"

echo "Git Hook Switcher"
echo "=================="

if [ ! -d "$HOOKS_DIR" ]; then
  echo -e "${RED}Hooks directory not found: $HOOKS_DIR${NC}"
  echo "Run: mkdir -p $HOOKS_DIR"
  exit 1
fi

echo "Available hook versions:"
echo "1. Standard - Formatting + package-level go vet"
echo "2. Format Only - Just formatting (no linting/vetting)"
echo "3. Smart - Advanced linting + better type resolution"
echo "4. Disable - No pre-commit hooks"
echo ""

read -p "Choose version (1/2/3/4): " choice

case $choice in
  1)
    echo "Installing standard pre-commit hook..."
    cp "$DOTFILES_HOOKS_DIR/pre-commit" "$HOOKS_DIR/"
    cp "$DOTFILES_HOOKS_DIR/pre-commit-go-format" "$HOOKS_DIR/"
    chmod +x "$HOOKS_DIR/pre-commit" "$HOOKS_DIR/pre-commit-go-format"
    echo -e "${GREEN}✓ Standard hook installed${NC}"
    echo "  • Formats with goimports + gofumpt"
    echo "  • Runs go vet at package level"
    echo "  • Skips generated files"
    ;;
  2)
    echo "Installing format-only pre-commit hook..."
    cp "$DOTFILES_HOOKS_DIR/pre-commit-format-only" "$HOOKS_DIR/pre-commit-go-format"
    
    # Create simple wrapper pre-commit
    cat > "$HOOKS_DIR/pre-commit" <<'EOF'
#!/usr/bin/env bash
# Format-only pre-commit hook wrapper
HOOK_DIR="$(dirname "$0")"
if [ -f "$HOOK_DIR/pre-commit-go-format" ]; then
  "$HOOK_DIR/pre-commit-go-format" || exit 1
fi
exit 0
EOF
    chmod +x "$HOOKS_DIR/pre-commit" "$HOOKS_DIR/pre-commit-go-format"
    echo -e "${GREEN}✓ Format-only hook installed${NC}"
    echo "  • Formats with goimports + gofumpt"
    echo "  • NO linting or vetting"
    echo "  • Skips generated files"
    echo -e "${YELLOW}  ⚠ Recommended if go vet is too annoying${NC}"
    ;;
  3)
    echo "Installing smart pre-commit hook..."
    cp "$DOTFILES_HOOKS_DIR/pre-commit-go-smart" "$HOOKS_DIR/pre-commit-go-format"
    
    # Create simple wrapper pre-commit
    cat > "$HOOKS_DIR/pre-commit" <<'EOF'
#!/usr/bin/env bash
# Smart pre-commit hook wrapper
HOOK_DIR="$(dirname "$0")"
if [ -f "$HOOK_DIR/pre-commit-go-format" ]; then
  "$HOOK_DIR/pre-commit-go-format" || exit 1
fi
exit 0
EOF
    chmod +x "$HOOKS_DIR/pre-commit" "$HOOKS_DIR/pre-commit-go-format"
    echo -e "${GREEN}✓ Smart hook installed${NC}"
    echo "  • Better multi-file package handling"
    echo "  • Advanced linting with golangci-lint"
    echo "  • Compilation checks"
    echo "  • Smarter error filtering"
    ;;
  4)
    echo "Disabling pre-commit hooks..."
    rm -f "$HOOKS_DIR/pre-commit" "$HOOKS_DIR/pre-commit-go-format"
    echo -e "${YELLOW}✓ Pre-commit hooks disabled${NC}"
    echo "To re-enable: git config --global core.hooksPath ~/.config/git/hooks"
    ;;
  *)
    echo -e "${RED}Invalid choice${NC}"
    exit 1
    ;;
esac

echo ""
echo "Current git hooks path: $(git config --get core.hooksPath || echo 'not set')"
echo ""
echo -e "${GREEN}✓ Claude attribution blocking is enabled${NC}"
echo "  • commit-msg hook removes any Claude attribution"
echo "  • All future commits will be clean"
echo ""
echo "To test: stage a Go file and run 'git commit'"
echo "To clean existing commits: clean-claude-commits"