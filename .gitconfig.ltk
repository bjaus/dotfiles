[core]
	editor = vim
        excludesfile = ~/.gitignore  # use global gitignore

[user]
	name = Brandon Jaus
	email = brandon.jaus@gmail.com
	username = bjaus

[init]
	defaultBranch = main
        templatedir = ~/.git-templates

# Ensure a "git fetch" prunes orphaned branches from your local index (general repo cleanliness)
[fetch]
        prune = true

# Ensure a "git pull" always rebases local changes on top of remote changes
[pull]
        rebase = true

# Ensure a "git push" can only push to a remote branch with the same name
[push]
	default = simple
	autoSetupRemote = true

# Tell git to always use ssh.
[url "git@github.com:"]
    insteadOf = https://github.com/
    insteadOf = git://github.com/
    insteadOf = git+https://github.com/
    insteadOf = git+git://github.com/

[credential]
	helper = cache --timeout 100000

[color]
	ui = auto

[color "branch"]
	current = yellow bold
	local = green bold
	remote = red bold

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse

[color "status"]
	added = green bold
	changed = yellow bold
	untracked = red bold

[diff]
	tool = vimdiff

[pager]
	branch = false
  stash = false

;[merge]
	;tool = vimdiff
	;prompt = false
	;conflictstyle = diff3
  ;layout = "(LOCAL,BASE,REMOTE)/MERGED"

[merge]
  tool = vim_mergetool
	prompt = false
  ;conflictstyle = diff3

[mergetool "vim_mergetool"]
  cmd = vim -f -c "MergetoolStart" "$MERGED" "$BASE" "$LOCAL" "$REMOTE"
  trustExitCode = true

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

; from Tim Hong: https://rewardstyle.slack.com/archives/G03T8S115/p1720637896640769
;
; Usage:
; git update <branch name> will checkout the target branch, pull, then come back to your original branch
; git count-commits <ref1>..<ref2> counts the number of commits between the two
; git trim-gone will delete any local branches for which the remote branch is gone
; git update-all will fetch, prune, and sync any of your branches which are behind their remote branches
; git contained-by <branch name> [optional branch args (eg. -av)] will list out which branches are contained by your specified one (eg. which branches are contained by my master branch?). This is the converse to git branch --contains <ref>
; git sub <command> will execute the same git command for all submodules
; git changelog <ref1>..<ref2> generate a changelog between two commits or refs
;
; [alias]
;         update = "!f() { CB=$(git branch | grep \"^\\*\" | cut -d' ' -f2); if [ -z \"$(git status | grep '^Changes not staged for commit')\" ]; then git checkout ${1} && git pull && git checkout ${CB}; else echo 'Cannot update. Stash changes before doing this'; fi }; f"
;         count-commits = "!f() { COUNT=$(git log --pretty=oneline ${1} | wc -l); echo \"count $1 -> $COUNT\"; }; f"
;         trim-gone = "!f() { git fetch --prune && for B in $(git branch -vv | grep ': gone]' | tr -s ' ' | cut -d' ' -f2); do git branch -D $B; done }; f"
;         update-all = "!f() { git fetch --prune && for B in $(git branch -vv | grep ': behind' | tr -s ' ' | cut -d' ' -f2); do git update $B; done }; f"
;         contained-by = "!f() { if [ -z \"$1\" ]; then echo 'ERR: No branch name provided' && exit 0; fi; CB=${1} && shift; echo \"Branches contained in: ${CB}\"; OLD_IFS=$IFS && IFS=$'\\n'; for B in $(git branch $* | grep -v \"^\\*\"); do [ -n \"$(git branch --contains $(echo \"$B\" | tr -s ' ' | cut -d' ' -f2) | grep $CB)\" ] && echo \"$B\"; done; IFS=$OLD_IFS; }; f"
;         sub = submodule foreach git
;         changelog = log --pretty=format:'* %s (%an)' --abbrev-commit --no-merges

[alias]

        maino = "!sh -c 'default_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed \"s@^refs/remotes/origin/@@\"); if [[ -z $default_branch ]]; then default_branch=\"master\"; fi; git checkout \"$default_branch\"'"
        mainv = "!sh git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'"
	# add
	a = add
	aa = add --all
        ap = add --patch
        au = add --u
	# branch
	b = branch
	ba = branch -a
	bm = branch -m
	br = branch -r
	bd = branch -d
	bdd = branch -D
	bv = branch -vv
        bvo = !git branch -vv | grep origin
        bvg = !git branch -vv | grep gone
        bt = for-each-ref --sort=-committerdate refs/heads/ --format='%(committerdate:iso8601) %(refname:short)'
	# cat-file
	cf = cat-file
	cfp = cat-file -p
	cfs = cat-file -s
	cft = cat-file -t
	# checkout
	o = checkout
	ob = checkout -b
        obn = checkout -b --no-verify
	# clone
	cl = clone
	# commit
	c = commit
        ca = commit --amend
        cn = commit --no-verify
        can = commit --amend --no-edit
        cann = commit --ament --no-edit --no-verify
	cm = commit -m
	cv = commit -v
	# config
	alias = config --get-regexp ^alias.
	# diff
	d = diff
        ds = diff --stat
        dss = diff --shortstat
        dw = diff -w
        dwf = "!f() { git --no-pager diff --name-only --diff-filter=\"$1\"; }; f"
        dwno = diff -w --name-only
        dwnop = !git --no-pager diff -w --name-only
        dws = diff -w --staged
        dno = diff --name-only
	# fetch
	f = fetch
        fa = fetch --all
	fv = fetch -v
	fo = fetch origin
	fu = fetch upstream
	# log
	l = log
	ll = log --oneline
        lg = "log --pretty=format:\"%C(auto)%h %C(brightblue)%d%Creset %s %C(brightyellow)(%an) %C(brightred)[%ad]%Creset\" --graph --date=local --date=format-local:\"%Y-%m-%d %H:%M:%S\""
        lp = log --patch
	# ls-files
	ls = ls-files
	lss = ls-files -s
	# merge
	m = merge
	# pull
	pl = pull
	plv = pull -v
	# push
	ps = push
        psf = push --force-with-lease # Don't use "git push -f/--force" they are not history-safe
        psn = push --no-verify
        psfn = push --force-with-lease --no-verify
	psu = push -u
	pst = push --tags
        psd = push origin --delete
        psdn = push origin --delete --no-verify
	# rebase
	rb = rebase
        rbc = rebase --continue
        rba = rebase --abort
        rbom = rebase origin/main
	# remote
	r = remote
	ra = remote add
	rn = remote rename
	rr = remote rm
	rs = remote show
	rso = remote show origin
	rsu = remote show upstream
	rv = remote -v
	# remove
	rmc = rm --cached
	rmf = rm -f
	rmrf = rm -r -f
	# reset
	re = reset
        # restore
        rep = restore --patch
        reps = restore --staged --patch
        rest = restore
        rests = restore --staged
	# stash
	sa = stash apply
	sc = stash clear
	sd = stash drop
	sl = stash list
	so = stash pop
        ssp = stash show -p
        sspno = stash show -p --name-only
        sp = stash push
	; ss = stash save
        spki = stash push --keep-index
	# status
	s = status
        ss = status -s
	sb = status -s -b
        suno = status -uno

#[core]
#	whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
#	excludesfile = ~/.gitignore
#[sendemail]
#	smtpencryption = tls
#	smtpserver = smtp.gmail.com
#	smtpuser = pavan.sss1991@gmail.com
#	smtppass = password
#	smtpserverport = 587
#[web]
#	browser = google-chrome
#[instaweb]
#	httpd = apache2 -f
#[rerere]
#	enabled = 1
#	autoupdate = 1
#[push]
#	default = matching
#[difftool]
#	prompt = false
#[github]
#	user = pkumar
#	token = token
#[gitflow "prefix"]
#	feature = feature-
#	release = release-
#	hotfix = hotfix-
#	support = support-
#	versiontag = v
#[alias]
#	ai = add -i
#	#############
#	ap = apply
#	as = apply --stat
#	ac = apply --check
#	#############
#	ama = am --abort
#	amr = am --resolved
#	ams = am --skip
#	#############
#	bc = rev-parse --abbrev-ref HEAD
#	bu = !git rev-parse --abbrev-ref --symbolic-full-name "@{u}"
#	#############
#	ca = commit -a
#	cm = commit -m
#	cam = commit -am
#	cem = commit --allow-empty -m
#	cd = commit --amend
#	cad = commit -a --amend
#	ced = commit --allow-empty --amend
#	#############
#	cld = clone --depth 1
#	clg = !sh -c 'git clone git://github.com/$1 $(basename $1)' -
#	clgp = !sh -c 'git clone git@github.com:$(git config --get user.username)/$1 $1' -
#	#############
#	cp = cherry-pick
#	cpa = cherry-pick --abort
#	cpc = cherry-pick --continue
#	#############
#	dp = diff --patience
#	dc = diff --cached
#	dk = diff --check
#	dck = diff --cached --check
#	dt = difftool
#	dct = difftool --cached
#	#############
#	#############
#	fp = format-patch
#	#############
#	fk = fsck
#	#############
#	g = grep -p
#	#############
#	ma = merge --abort
#	mc = merge --continue
#	ms = merge --skip
#	#############
#	o = checkout
#	ob = checkout -b
#	#############
#	pr = prune -v
#	#############
#	psf = push -f
#	#############
#	pso = push origin
#	psao = push --all origin
#	psfo = push -f origin
#	psuo = push -u origin
#	#############
#	psom = push origin master
#	psaom = push --all origin master
#	psfom = push -f origin master
#	psuom = push -u origin master
#	psoc = !git push origin $(git bc)
#	psaoc = !git push --all origin $(git bc)
#	psfoc = !git push -f origin $(git bc)
#	psuoc = !git push -u origin $(git bc)
#	psdc = !git push origin :$(git bc)
#	#############
#	pb = pull --rebase
#	#############
#	plo = pull origin
#	pbo = pull --rebase origin
#	plom = pull origin master
#	ploc = !git pull origin $(git bc)
#	pbom = pull --rebase origin master
#	pboc = !git pull --rebase origin $(git bc)
#	#############
#	plu = pull upstream
#	plum = pull upstream master
#	pluc = !git pull upstream $(git bc)
#	pbum = pull --rebase upstream master
#	pbuc = !git pull --rebase upstream $(git bc)
#	#############
#	rba = rebase --abort
#	rbc = rebase --continue
#	rbi = rebase --interactive
#	rbs = rebase --skip
#	#############
#	rh = reset HEAD
#	reh = reset --hard
#	rem = reset --mixed
#	res = reset --soft
#	rehh = reset --hard HEAD
#	remh = reset --mixed HEAD
#	resh = reset --soft HEAD
#	#############
#	rp = remote prune
#	rao = remote add origin
#	rau = remote add upstream
#	rro = remote remove origin
#	rru = remote remove upstream
#	rso = remote show origin
#	rsu = remote show upstream
#	rpo = remote prune origin
#	rpu = remote prune upstream
#	#############
#	rmf = rm -f
#	rmrf = rm -r -f
#	#############
#	#############
#	ssk = stash save -k
#	sw = stash show
#	st = !git stash list | wc -l 2>/dev/null | grep -oEi '[0-9][0-9]*'
#	#############
#	t = tag
#	td = tag -d
#	#############
#	w = show
#	wp = show -p
#	wr = show -p --no-color
#	#############
#	svnr = svn rebase
#	svnd = svn dcommit
#	svnl = svn log --oneline --show-commit
#	#############
#	subadd = !sh -c 'git submodule add git://github.com/$1 $2/$(basename $1)' -
	subinit = submodule init
	subup = submodule update --remote --recursive
        subout = submodule update --checkout
#	subpull = !git submodule foreach git pull --tags origin master
#	#############
#	assume = update-index --assume-unchanged
#	unassume = update-index --no-assume-unchanged
#	assumed = !git ls -v | grep ^h | cut -c 3-
#	unassumeall = !git assumed | xargs git unassume
#	assumeall = !git status -s | awk {'print $2'} | xargs git assume
#	#############
#	bump = !sh -c 'git commit -am \"Version bump v$1\" && git psuoc && git release $1' -
#	release = !sh -c 'git tag v$1 && git pst' -
#	unrelease = !sh -c 'git tag -d v$1 && git pso :v$1' -
#	merged = !sh -c 'git o master && git plom && git bd $1 && git rpo' -
#	aliases = !git config -l | grep alias | cut -c 7-
#	snap = !git stash save 'snapshot: $(date)' && git stash apply 'stash@{0}'
#	bare = !sh -c 'git symbolic-ref HEAD refs/heads/$1 && git rm --cached -r . && git clean -xfd' -
#	whois = !sh -c 'git log -i -1 --author=\"$1\" --pretty=\"format:%an <%ae>\"' -
#	serve = daemon --reuseaddr --verbose --base-path=. --export-all ./.git
#	#############
#	behind = !git rev-list --left-only --count $(git bu)...HEAD
#	ahead = !git rev-list --right-only --count $(git bu)...HEAD
#	#############
#	ours = "!f() { git checkout --ours $@ && git add $@; }; f"
#	theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
#	subrepo = !sh -c 'git filter-branch --prune-empty --subdirectory-filter $1 master' -
#	human = name-rev --name-only --refs=refs/heads/*
